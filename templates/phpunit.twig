<?php{% if not php5 %} declare(strict_types = 1);{% endif %}

{% if namespace %}

namespace {{ namespace }};
{% endif %}

{% if mockery %}
use Mockery;
use Mockery\MockInterface;
{% endif %}
use {{ baseClass.namespacedName }};

{% if covers %}
/**
 * @covers {{ namespacedName }}
 */
{% endif %}
class {{ class }}Test extends {{ baseClass.class }}
{
    /** @var {{ class }} */
    private ${{ class|lcfirst }};

{% for dependency in dependencies %}
    /** @var {% if dependency.type %}{{ dependency.type }}{% else %}mixed{% endif %}{% if not dependency.isScalar and not mockery %} | PHPUnit_Framework_MockObject_MockObject{% elseif not dependency.isScalar and mockery %} | MockInterface{% endif %} */
    private ${{ dependency.name }};

{% endfor %}
    protected function setUp()
    {
{% for dependency in dependencies %}
{% if not dependency.value|isNull %}
        $this->{{ dependency.name }} = {{ dependency.value }};
{% elseif not dependency.type %}
        $this->{{ dependency.name }} = null;
{% elseif not mockery %}
        $this->{{ dependency.name }} = $this->createMock({{ dependency.type }}::class);
{% else %}
        $this->{{ dependency.name }} = Mockery::mock({{ dependency.type }}::class);
{% endif %}
{% endfor %}
        $this->{{ class|lcfirst }} = new {{ class }}(
{% for dependency in dependencies %}
            $this->{{ dependency.name }}{% if not loop.last %},{% endif %}

{% endfor %}
        );
    }

    public function testMissing()
    {
        $this->fail('Test not yet implemented');
    }
}

#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

use PhpParser\Node;
use PhpParser\NodeVisitorAbstract;
use PhpParser\ParserFactory;
use PhpParser\PrettyPrinter;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitor\NameResolver;

$description = <<<EOT
PHP7-Type-Declaration-Remover

Usage:
  remove-php7-type-declarations <input-file> [<output-file>] [--write]
EOT;

class Php7TypeDeclarationRemover extends NodeVisitorAbstract
{
    const SCALAR_TYPES = ['bool', 'int', 'string', 'float', 'boolean', 'double'];

    public function leaveNode(Node $node) {
        if ($node instanceof Node\Stmt\ClassMethod || $node instanceof Node\Stmt\Function_) {
            foreach ($node->params as &$param) {
                if (in_array($param->type, self::SCALAR_TYPES, true)) {
                    $param->type = null;
                }
            }
            $node->returnType = null;
        } else if ($node instanceof Node\Stmt\Declare_) {
            return NodeTraverser::REMOVE_NODE;
        }
    }
}

function main(\Docopt\Response $args): void
{
    $inputFile = $args['<input-file>'];
    $outputFile = $args['<output-file>'] ?? '/dev/stdout';

    if (!is_file($inputFile)
        || !is_readable($inputFile)
    ) {
        echo 'Input file is not a file or not readable' . PHP_EOL;
        exit(1);
    }

    if ($args['--write']) {
        $outputFile = $inputFile;
    }

    if ($outputFile === null
        && !is_writable($outputFile)
        && !is_writable(dirname($outputFile))) {
        echo 'Output file is not writable' . PHP_EOL;
        exit(1);
    }

    $parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
    $traverser = new NodeTraverser;
    $prettyPrinter = new PrettyPrinter\Standard;

    $traverser->addVisitor(new NameResolver);
    $traverser->addVisitor(new Php7TypeDeclarationRemover);

    try {
        $code = file_get_contents($inputFile);
        $stmts = $traverser->traverse($parser->parse($code));
        $code = $prettyPrinter->prettyPrintFile($stmts);

        file_put_contents($outputFile, $code);
    } catch (PhpParser\Error $e) {
        echo 'Parse Error: ' . $e->getMessage() . PHP_EOL;
        exit(2);
    } catch (Exception $exception) {
        echo 'Something went wrong.' . PHP_EOL;
        exit(3);
    }
}

main(Docopt::handle($description));
